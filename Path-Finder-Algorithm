import tkinter as tk
from tkinter import simpledialog, messagebox
from queue import Queue
import random

class MicromouseMaze:
    def _init_(self, root):
        self.root = root
        self.n = 10  # Default rows
        self.m = 10  # Default columns
        self.cell_size = 30
        self.grid = []
        self.start = None
        self.end = None
        self.mode = "obstacle"  # Modes: 'obstacle', 'start', 'end'
        self.create_gui()

    def create_gui(self):
        # Canvas for maze
        self.canvas = tk.Canvas(self.root, bg="white")
        self.canvas.grid(row=0, column=0, padx=10, pady=10)
        self.canvas.bind("<Button-1>", self.handle_click)

        # Control buttons
        controls = tk.Frame(self.root)
        controls.grid(row=0, column=1, padx=10, pady=10)

        tk.Button(controls, text="Generate Random Maze", command=self.generate_random_maze).pack(pady=5)
        tk.Button(controls, text="Set Start Point", command=lambda: self.set_mode("start")).pack(pady=5)
        tk.Button(controls, text="Set End Point", command=lambda: self.set_mode("end")).pack(pady=5)
        tk.Button(controls, text="Obstacle Mode", command=lambda: self.set_mode("obstacle")).pack(pady=5)
        tk.Button(controls, text="Set Grid Size", command=self.set_grid_size).pack(pady=5)
        tk.Button(controls, text="Solve Maze", command=self.solve_maze).pack(pady=5)
        tk.Button(controls, text="Reset", command=self.reset).pack(pady=5)

        self.reset()

    def reset(self):
        self.grid = [[0 for _ in range(self.m)] for _ in range(self.n)]
        self.start = None
        self.end = None
        self.draw_grid()

    def draw_grid(self):
        self.canvas.delete("all")
        self.canvas.config(width=self.m * self.cell_size, height=self.n * self.cell_size)
        for i in range(self.n):
            for j in range(self.m):
                x1, y1 = j * self.cell_size, i * self.cell_size
                x2, y2 = x1 + self.cell_size, y1 + self.cell_size
                color = "white"
                if self.grid[i][j] == 1:
                    color = "black"  # Obstacle
                elif (i, j) == self.start:
                    color = "green"  # Start point
                elif (i, j) == self.end:
                    color = "red"  # End point
                self.canvas.create_rectangle(x1, y1, x2, y2, fill=color, outline="gray")

    def handle_click(self, event):
        row, col = event.y // self.cell_size, event.x // self.cell_size
        if self.mode == "start":
            self.start = (row, col)
        elif self.mode == "end":
            self.end = (row, col)
        elif self.mode == "obstacle":
            self.grid[row][col] = 1 - self.grid[row][col]  # Toggle obstacle
        self.draw_grid()

    def set_mode(self, mode):
        self.mode = mode

    def set_grid_size(self):
        try:
            rows = int(simpledialog.askstring("Input", "Enter number of rows:", parent=self.root))
            cols = int(simpledialog.askstring("Input", "Enter number of columns:", parent=self.root))
            if rows > 0 and cols > 0:
                self.n, self.m = rows, cols
                self.reset()
            else:
                raise ValueError
        except ValueError:
            messagebox.showerror("Invalid Input", "Please enter valid positive integers.")

    def generate_random_maze(self):
        self.reset()
        for i in range(self.n):
            for j in range(self.m):
                if random.random() < 0.3:  # 30% chance of obstacle
                    self.grid[i][j] = 1
        self.draw_grid()

    def solve_maze(self):
        if not self.start or not self.end:
            messagebox.showerror("Error", "Start or End point not set!")
            return

        distances = [[-1 for _ in range(self.m)] for _ in range(self.n)]
        queue = Queue()
        queue.put((self.end, 0))  # Start BFS from the end point
        distances[self.end[0]][self.end[1]] = 0

        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
        while not queue.empty():
            (x, y), dist = queue.get()
            for dx, dy in directions:
                nx, ny = x + dx, y + dy
                if 0 <= nx < self.n and 0 <= ny < self.m and self.grid[nx][ny] == 0 and distances[nx][ny] == -1:
                    distances[nx][ny] = dist + 1
                    queue.put(((nx, ny), dist + 1))

        # Draw distances
        self.draw_grid()
        for i in range(self.n):
            for j in range(self.m):
                if distances[i][j] != -1 and self.grid[i][j] == 0:
                    x1, y1 = j * self.cell_size, i * self.cell_size
                    self.canvas.create_text(x1 + self.cell_size // 2, y1 + self.cell_size // 2, text=str(distances[i][j]))

        # Trace path from start to end
        if distances[self.start[0]][self.start[1]] == -1:
            messagebox.showinfo("Result", "No path found!")
            return

        path = []
        current = self.start
        while current != self.end:
            path.append(current)
            x, y = current
            for dx, dy in directions:
                nx, ny = x + dx, y + dy
                if 0 <= nx < self.n and 0 <= ny < self.m and distances[nx][ny] == distances[x][y] - 1:
                    current = (nx, ny)
                    break

        for r, c in path:
            x1, y1 = c * self.cell_size, r * self.cell_size
            x2, y2 = x1 + self.cell_size, y1 + self.cell_size
            self.canvas.create_rectangle(x1, y1, x2, y2, fill="blue", outline="gray")

        messagebox.showinfo("Result", "Path found!")

if _name_ == "_main_":
    root = tk.Tk()
    root.title("Micromouse Maze Solver")
    app = MicromouseMaze(root)
    root.mainloop()
